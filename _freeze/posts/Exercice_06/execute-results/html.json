{
  "hash": "bd248cbc0e567bb0eb57df69d9b9f511",
  "result": {
    "markdown": "---\ntitle: \"Exercice 06\"\nauthor: \"Clément Poupelin\"\ndate: \"2025-02-23\"\nformat: \n  html:\n    embed-resources: false\n    toc: true\n    code-fold: true\n    code-summary: \"Show the code\"\n    code-tools: true\n    toc-location: right\n    page-layout: article\n    code-overflow: wrap\ntoc: true\nnumber-sections: false\neditor: visual\ncategories: [\"Régression sur composantes principales\", \"Régression des moindres carrés partiels\", \"Validation croisée\"]\nimage: \"/img/baseball.png\"\ndescription: \"Ici, on continu sur des données de baseball en mettant en pratique les techniques de PCR et PLS avec de la validation croisée\"\n---\n\n\n\n# Intervenant.e.s\n\n### Rédaction\n\n-   **Clément Poupelin**, [clementjc.poupelin\\@gmail.com](mailto:clementjc.poupelin@gmail.com){.email}\\\n\n### Relecture\n\n-   \n\n\n# Rappels sur PCR et PLS\n\n\nDans l’analyse des données et la modélisation statistique, la régression linéaire classique peut être limitée lorsque les variables explicatives sont fortement corrélées (problème de colinéarité) ou lorsque leur nombre est supérieur au nombre d’observations (problème de haute dimensionnalité). Pour remédier à ces défis, des méthodes de réduction de dimensionnalité comme la Régression sur Composantes Principales (PCR) et la Régression des Moindres Carrés Partiels (PLS) sont utilisées.\n\n::: panel-tabset\n\n## PCR\n\nRégression sur Composantes Principales (PCR)\nLa PCR repose sur une Analyse en Composantes Principales (ACP) pour transformer les variables explicatives en nouvelles variables orthogonales appelées composantes principales. Seules les premières composantes, capturant le plus de variance, sont conservées dans la régression. Cette approche permet de réduire la multicolinéarité et d’éviter le sur-ajustement en limitant la complexité du modèle. Cependant, la PCR ne prend pas en compte la relation entre les variables explicatives et la variable réponse lors de la sélection des composantes.\n\n\n## PLS \n\nRégression des Moindres Carrés Partiels (PLS)\nContrairement à la PCR, la PLS cherche à maximiser la covariance entre les variables explicatives et la variable réponse. Elle construit des composantes latentes qui capturent non seulement la variance des variables explicatives mais aussi leur corrélation avec la variable à prédire. Cette méthode est souvent plus efficace que la PCR pour les problèmes de prédiction, car elle optimise directement la relation entre les prédicteurs et la réponse.\n\n:::\n\nEn résumé, la PCR est une approche basée sur la variance des prédicteurs, tandis que la PLS optimise la relation entre les prédicteurs et la réponse. Le choix entre ces deux méthodes dépend du contexte : la PCR est utile pour la réduction de dimensionnalité, tandis que la PLS est souvent plus performante pour la prédiction\n\n\n\n\n\n\n\n# Setup\n\n:::: panel-tabset\n## Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Données\nlibrary(ISLR)         # Hitters data \nlibrary(dplyr)        # manipulation des données\n\n# Infrence\nlibrary(pls) ## PCR et PLS\n\n\n# Plots\n## ggplot\nlibrary(ggplot2)\nlibrary(gridExtra)\n```\n:::\n\n\n## Fonctions\n\n::: panel-tabset\n\n### Plot de validation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_validationplot <- function(mod, data) {\n  msep.cv <- MSEP(mod, estimate = c(\"CV\", \"adjCV\"))\n  rmsep.cv <- RMSEP(mod, estimate = c(\"CV\", \"adjCV\"))\n  \n  x_msep <- c(msep.cv$val[1, , ], msep.cv$val[2, , ])\n  x_rmsep <- c(rmsep.cv$val[1, , ], rmsep.cv$val[2, , ])\n  y <- c(rep(\"CV\", length(msep.cv$val[2, , ])), rep(\"adjCV\", length(msep.cv$val[2, , ])))\n  \n  z <- c(0:(ncol(data) - 1), 0:(ncol(data) - 1))\n  dt <- data.frame(x_msep, x_rmsep, y, z)\n  colnames(dt) <- c(\"MSEP\", \"RMSEP\", \"sample\", \"comps\")\n  \n  \n  p.msep <- ggplot(dt, aes(x = comps, y = MSEP, col = sample)) + geom_line() +\n    theme_bw()\n  p.rmsep <- ggplot(dt, aes(x = comps, y = RMSEP, col = sample)) + geom_line() +\n    theme_bw()\n  \n  return(list(MSEP = p.msep, RMSEP = p.rmsep))\n}\n```\n:::\n\n\n\n:::\n\n## Seed\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(140400)\n```\n:::\n\n\n::::\n\n\n# Données\n\nOn étudie à nouveau le jeu de données [**Hitters**](https://rdrr.io/cran/ISLR/man/Hitters.html) disponible dans la libraire *`{ISLR}`* de *`R`*. Il s'agit d'un jeu de données de la *Major League Baseball* provenant des saisons de 1986 et 1987.\n\nLe jeu de données possède 322 lignes/individus pour les différents joueurs et 20 variables.\\\nParmi les variables, on trouve les informations suivantes :\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-hover table-condensed\" style=\"margin-left: auto; margin-right: auto;\">\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> <span style=\" font-weight: bold;    \">AtBat</span> </td>\n   <td style=\"text-align:left;\"> Number of times at bat in 1986 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <span style=\" font-weight: bold;    \">Hits</span> </td>\n   <td style=\"text-align:left;\"> Number of hits in 1986 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <span style=\" font-weight: bold;    \">HmRun</span> </td>\n   <td style=\"text-align:left;\"> Number of home runs in 1986 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <span style=\" font-weight: bold;    \">Runs</span> </td>\n   <td style=\"text-align:left;\"> Number of runs in 1986 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <span style=\" font-weight: bold;    \">RBI</span> </td>\n   <td style=\"text-align:left;\"> Number of runs batted in in 1986 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <span style=\" font-weight: bold;    \">Walks</span> </td>\n   <td style=\"text-align:left;\"> Number of walks in 1986 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <span style=\" font-weight: bold;    \">Years</span> </td>\n   <td style=\"text-align:left;\"> Number of years in the major leagues </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <span style=\" font-weight: bold;    \">CAtBat</span> </td>\n   <td style=\"text-align:left;\"> Number of times at bat during his career </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <span style=\" font-weight: bold;    \">CHits</span> </td>\n   <td style=\"text-align:left;\"> Number of hits during his career </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <span style=\" font-weight: bold;    \">CHmRun</span> </td>\n   <td style=\"text-align:left;\"> Number of home runs during his career </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <span style=\" font-weight: bold;    \">CRuns</span> </td>\n   <td style=\"text-align:left;\"> Number of runs during his career </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <span style=\" font-weight: bold;    \">CRBI</span> </td>\n   <td style=\"text-align:left;\"> Number of runs batted in during his career </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <span style=\" font-weight: bold;    \">CWalks</span> </td>\n   <td style=\"text-align:left;\"> Number of walks during his career </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <span style=\" font-weight: bold;    \">League</span> </td>\n   <td style=\"text-align:left;\"> A factor with levels A and N indicating player's league at the end of 1986 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <span style=\" font-weight: bold;    \">Division</span> </td>\n   <td style=\"text-align:left;\"> A factor with levels E and W indicating player's division at the end of 1986 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <span style=\" font-weight: bold;    \">PutOuts</span> </td>\n   <td style=\"text-align:left;\"> Number of put outs in 1986 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <span style=\" font-weight: bold;    \">Assists</span> </td>\n   <td style=\"text-align:left;\"> Number of assists in 1986 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <span style=\" font-weight: bold;    \">Errors</span> </td>\n   <td style=\"text-align:left;\"> Number of errors in 1986 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <span style=\" font-weight: bold;    \">Salary</span> </td>\n   <td style=\"text-align:left;\"> 1987 annual salary on opening day in thousands of dollars </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <span style=\" font-weight: bold;    \">NewLeague</span> </td>\n   <td style=\"text-align:left;\"> A factor with levels A and N indicating player's league at the beginning of 1987 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nComme pour l'[Exercice 1](../posts/Exercice_01.qmd), on va commencer par se débarasser des variables manquantes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHitters_Without_NA <- Hitters %>% na.omit()\n```\n:::\n\n\nComme cela fait maintenant plusieurs fois que l'on fait affaire à ce jeu de données, on se passera des analyses descritpives faites en [Exercice 1](../posts/Exercice_01.qmd).\n\nAinsi, on va pouvoir tout de suite commencer par faire le découpage de notre jeu de données en échantillon *train* et *test*. Le jeu de données *train* contiendra 3/4 des individus sans valeurs manquantes de Hitters, tirés aléatoirement. Le reste du jeu de données composera l’échantillon *test*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npercent_to_draw <- 0.75\nindex_train <- sample(nrow(Hitters_Without_NA), size = floor(percent_to_draw * nrow(Hitters_Without_NA)))\n\nHitters_train <- Hitters_Without_NA[index_train, ]\n\nHitters_test <- Hitters_Without_NA[-index_train, ]\n```\n:::\n\n\n\n# Analyse Inférentielle\n\n\n::: panel-tabset\n\n## PCR\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod_pcr <- pcr(\n  Salary ~ .,\n  scale = TRUE,\n  data = Hitters_train,\n  validation = \"CV\",\n  segments = 10\n)\nmod_pcr %>% summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nData: \tX dimension: 197 19 \n\tY dimension: 197 1\nFit method: svdpc\nNumber of components considered: 19\n\nVALIDATION: RMSEP\nCross-validated using 10 random segments.\n       (Intercept)  1 comps  2 comps  3 comps  4 comps  5 comps  6 comps\nCV           451.6    359.2    360.4    362.1    358.4    355.4    361.6\nadjCV        451.6    358.6    359.6    361.3    357.6    354.6    360.3\n       7 comps  8 comps  9 comps  10 comps  11 comps  12 comps  13 comps\nCV       362.3    367.7    373.1     374.9     376.3     378.2     378.9\nadjCV    360.8    365.8    370.9     372.2     373.7     375.4     376.0\n       14 comps  15 comps  16 comps  17 comps  18 comps  19 comps\nCV        372.9     375.5       352     350.3     349.2     349.8\nadjCV     369.6     372.2       349     347.1     345.9     346.4\n\nTRAINING: % variance explained\n        1 comps  2 comps  3 comps  4 comps  5 comps  6 comps  7 comps  8 comps\nX         38.57    60.46     71.0    79.17    84.43    88.90    92.26     95.1\nSalary    39.51    40.48     40.6    42.04    43.04    44.32    45.36     45.8\n        9 comps  10 comps  11 comps  12 comps  13 comps  14 comps  15 comps\nX         96.48     97.43     98.12     98.70     99.18      99.5     99.75\nSalary    45.81     47.70     47.71     48.14     48.26      51.2     51.55\n        16 comps  17 comps  18 comps  19 comps\nX          99.91     99.97     99.99    100.00\nSalary     57.09     58.10     58.89     59.19\n```\n:::\n:::\n\n\n\nOn peut maintenant visualiser l'évolution du MSEP et RMSEP enfonction du nombre de composantes gardées.\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid.arrange(my_validationplot(mod_pcr, Hitters_train)$MSEP,\n             my_validationplot(mod_pcr, Hitters_train)$RMSEP,\n             ncol=2)\n```\n\n::: {.cell-output-display}\n![](Exercice_06_files/figure-html/unnamed-chunk-7-1.png){width=1152}\n:::\n:::\n\n\nOn peut voir courbe proche entre CV et adjCV avec une valeur minimum qui semble se trouver pour 6 composantes.\n\n\nEt on petut alors récupérer le nombre de composantes à garder qui minimsent le MSEP et RMSEP.\n\n::: {.cell}\n\n```{.r .cell-code}\nncomp.rmsep_pcr <- which.min(RMSEP(mod_pcr, estimate = c(\"CV\"))$val[\"CV\",,])-1\n```\n:::\n\n\n\n## PLS\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod_pls <- plsr(\n  Salary ~ .,\n  scale = TRUE,\n  data = Hitters_train,\n  validation = \"CV\",\n  segments = 10\n)\nmod_pls %>% summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nData: \tX dimension: 197 19 \n\tY dimension: 197 1\nFit method: kernelpls\nNumber of components considered: 19\n\nVALIDATION: RMSEP\nCross-validated using 10 random segments.\n       (Intercept)  1 comps  2 comps  3 comps  4 comps  5 comps  6 comps\nCV           451.6    353.8    354.0    355.4    354.6    358.6    354.5\nadjCV        451.6    353.3    353.1    354.5    353.0    355.7    351.3\n       7 comps  8 comps  9 comps  10 comps  11 comps  12 comps  13 comps\nCV       346.0    338.3    336.1     337.5     335.9     332.6     332.7\nadjCV    343.4    336.0    333.7     335.2     333.3     330.3     330.4\n       14 comps  15 comps  16 comps  17 comps  18 comps  19 comps\nCV        329.2     330.3     331.1     329.8     329.1     329.4\nadjCV     327.1     328.1     328.7     327.6     326.9     327.2\n\nTRAINING: % variance explained\n        1 comps  2 comps  3 comps  4 comps  5 comps  6 comps  7 comps  8 comps\nX         38.35    51.49    65.93     72.1    76.66    83.61    87.75    89.94\nSalary    41.91    45.71    47.66     49.8    52.71    54.18    55.37    56.92\n        9 comps  10 comps  11 comps  12 comps  13 comps  14 comps  15 comps\nX         93.10     95.65     96.66     97.49     98.39     98.58     99.05\nSalary    57.52     57.78     58.24     58.40     58.52     58.81     58.88\n        16 comps  17 comps  18 comps  19 comps\nX          99.41     99.74     99.99    100.00\nSalary     58.97     59.05     59.09     59.19\n```\n:::\n:::\n\n\n\nOn peut maintenant visualiser l'évolution du MSEP et RMSEP enfonction du nombre de composantes gardées.\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid.arrange(my_validationplot(mod_pls, Hitters_train)$MSEP,\n             my_validationplot(mod_pls, Hitters_train)$RMSEP,\n             ncol=2)\n```\n\n::: {.cell-output-display}\n![](Exercice_06_files/figure-html/unnamed-chunk-10-1.png){width=1152}\n:::\n:::\n\n\nOn peut voir courbe proche entre CV et adjCV avec une valeur minimum qui semble se trouver pour 6 composantes.\n\n\nEt on petut alors récupérer le nombre de composantes à garder qui minimsent le MSEP et RMSEP.\n\n::: {.cell}\n\n```{.r .cell-code}\nncomp.rmsep_pls <- which.min(RMSEP(mod_pls, estimate = c(\"CV\"))$val[\"CV\",,])-1\n```\n:::\n\n\n\n\n:::\n\n\n\n# Prédiction\n\nOn va calculer le RMSEP calculé à partir de la prédiction pour l'échantillon test.\n\n::: {.cell}\n\n```{.r .cell-code}\nhat_Hitters_test_mod_pcr <- predict(mod_pcr, Hitters_test, ncomp =  (which.min(RMSEP(\n  mod_pcr, estimate = c(\"CV\")\n)$val[\"CV\", , ]) - 1))\nrmsep_mod_pcr <- sqrt(mean((\n  hat_Hitters_test_mod_pcr - Hitters_test$Salary\n) ** 2))\n\nhat_df_test_salary.pls <- predict(mod_pls, Hitters_test, ncomp =  (which.min(RMSEP(\n  mod_pls, estimate = c(\"CV\")\n)$val[\"CV\", , ]) - 1))\nrmsep_mod_pls <- sqrt(mean((\n  hat_df_test_salary.pls - Hitters_test$Salary\n) ** 2))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrmsep_df <- data.frame(\"prediction PCR\" = rmsep_mod_pcr, \"prediction PLS\" = rmsep_mod_pls) \nrownames(rmsep_df) <- \"RMSEP\"\nrmsep_df \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      prediction.PCR prediction.PLS\nRMSEP       369.5149       373.6123\n```\n:::\n:::\n\n\n\n\n\n\n\n\n# Conclusion\n\n\n\n\n\n\n\n\n\n\n\n# Session info\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessioninfo::session_info(pkgs = \"attached\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.1 (2022-06-23 ucrt)\n os       Windows 10 x64 (build 22631)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  French_France.utf8\n ctype    French_France.utf8\n tz       Europe/Paris\n date     2025-02-23\n pandoc   3.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package    * version date (UTC) lib source\n dplyr      * 1.1.4   2023-11-17 [1] CRAN (R 4.2.3)\n forcats    * 1.0.0   2023-01-29 [1] CRAN (R 4.2.2)\n ggplot2    * 3.5.1   2024-04-23 [1] CRAN (R 4.2.3)\n gridExtra  * 2.3     2017-09-09 [1] CRAN (R 4.2.1)\n ISLR       * 1.4     2021-09-15 [1] CRAN (R 4.2.3)\n kableExtra * 1.4.0   2024-01-24 [1] CRAN (R 4.2.3)\n lubridate  * 1.9.3   2023-09-27 [1] CRAN (R 4.2.3)\n pls        * 2.8-3   2023-11-17 [1] CRAN (R 4.2.3)\n purrr      * 1.0.2   2023-08-10 [1] CRAN (R 4.2.3)\n readr      * 2.1.5   2024-01-10 [1] CRAN (R 4.2.3)\n stringr    * 1.5.1   2023-11-14 [1] CRAN (R 4.2.3)\n tibble     * 3.2.1   2023-03-20 [1] CRAN (R 4.2.3)\n tidyr      * 1.3.1   2024-01-24 [1] CRAN (R 4.2.3)\n tidyverse  * 2.0.0   2023-02-22 [1] CRAN (R 4.2.2)\n\n [1] C:/Users/cleme/AppData/Local/R/win-library/4.2\n [2] C:/Program Files/R/R-4.2.1/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf = na.omit(Hitters)\ndim(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 263  20\n```\n:::\n\n```{.r .cell-code}\nset.seed(123)\npourcentage_a_tirer = 0.75\nindices_train = sample(nrow(df), size = floor(pourcentage_a_tirer * nrow(df)))\n\ndf_train = df[indices_train, ]\ndim(df_train)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 197  20\n```\n:::\n\n```{.r .cell-code}\ndf_test = df[-indices_train, ] \ndim(df_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 66 20\n```\n:::\n\n```{.r .cell-code}\n# Question 1.5 --------------------------------------------------------------\n\n# faire une selec forwise-stepwise avec critere BIC sur train puis rmsep sur test\nmod0=lm(Salary~0, data=df_train)\nmod_full=lm(Salary~., data=df_train)\nmod.step = step(mod0, scope = formula(mod_full), trace = FALSE, direction = \"both\", k = log(n))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in log(n): argument non numérique pour une fonction mathématique\n```\n:::\n\n```{.r .cell-code}\nsummary(mod.step)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in summary(mod.step): objet 'mod.step' introuvable\n```\n:::\n\n```{.r .cell-code}\n# significativité de nos 3 var (CRuns Walks CWalks) + r2 => mod  pas trop mal\n# grosse standard error\n\nhat_df_test_mod.step = predict(mod.step, df_test)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in predict(mod.step, df_test): objet 'mod.step' introuvable\n```\n:::\n\n```{.r .cell-code}\nrmsep_mod.step = sqrt(mean((hat_df_test_mod.step - df_test$Salary)**2))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in mean((hat_df_test_mod.step - df_test$Salary)^2): objet 'hat_df_test_mod.step' introuvable\n```\n:::\n\n```{.r .cell-code}\nrmsep_mod.step\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): objet 'rmsep_mod.step' introuvable\n```\n:::\n\n```{.r .cell-code}\n# 357.7089\n\n# Question 2 --------------------------------------------------------------\n\n\nlibrary(pls)\nsalary.pcr = pcr(Salary ~., scale = TRUE, data = df_train, validation = \"CV\", segments=10)\nsummary(salary.pcr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nData: \tX dimension: 197 19 \n\tY dimension: 197 1\nFit method: svdpc\nNumber of components considered: 19\n\nVALIDATION: RMSEP\nCross-validated using 10 random segments.\n       (Intercept)  1 comps  2 comps  3 comps  4 comps  5 comps  6 comps\nCV           480.9    362.8    364.2    364.4    359.7    355.5    359.4\nadjCV        480.9    362.3    363.6    363.8    358.9    354.6    358.2\n       7 comps  8 comps  9 comps  10 comps  11 comps  12 comps  13 comps\nCV       360.2    363.8    365.5     358.3     360.0     359.9     361.7\nadjCV    358.9    362.4    363.9     356.5     358.2     358.1     360.0\n       14 comps  15 comps  16 comps  17 comps  18 comps  19 comps\nCV        348.9     348.6     343.3     343.5     343.6     345.8\nadjCV     346.7     346.5     341.2     341.2     341.2     343.3\n\nTRAINING: % variance explained\n        1 comps  2 comps  3 comps  4 comps  5 comps  6 comps  7 comps  8 comps\nX         40.51    60.57    71.15    79.89    85.15    89.29    92.85    95.30\nSalary    45.77    45.85    46.38    47.72    49.65    50.36    50.76    50.76\n        9 comps  10 comps  11 comps  12 comps  13 comps  14 comps  15 comps\nX         96.53     97.46     98.13     98.74     99.16     99.51     99.77\nSalary    51.02     53.82     54.07     54.25     54.60     58.06     58.32\n        16 comps  17 comps  18 comps  19 comps\nX          99.90     99.97     99.99    100.00\nSalary     59.87     60.62     61.27     61.27\n```\n:::\n\n```{.r .cell-code}\npar(mfrow=c(1,2))\nvalidationplot(salary.pcr, val.type = \"RMSEP\") \nvalidationplot(salary.pcr, val.type = \"MSEP\") \n```\n\n::: {.cell-output-display}\n![](Exercice_06_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# validationplot(salary.pcr, val.type = \"R2\") # inutile car augment tout le temps en fonction des composantes \npar(mfrow=c(1,1))\n\n\nsalary.pcr$coefficients\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n, , 1 comps\n\n              Salary\nAtBat      26.854472\nHits       26.349011\nHmRun      24.171415\nRuns       25.846286\nRBI        29.459770\nWalks      25.548791\nYears      30.927868\nCAtBat     37.133303\nCHits      37.361129\nCHmRun     35.836624\nCRuns      38.290782\nCRBI       37.990129\nCWalks     35.532417\nLeagueN    -6.506781\nDivisionW  -6.460451\nPutOuts    12.180892\nAssists     3.897012\nErrors      4.353903\nNewLeagueN -6.135108\n\n, , 2 comps\n\n              Salary\nAtBat      29.333553\nHits       28.794921\nHmRun      25.648648\nRuns       28.310510\nRBI        31.424972\nWalks      27.206460\nYears      28.926963\nCAtBat     35.664424\nCHits      35.970834\nCHmRun     34.694334\nCRuns      36.992021\nCRBI       36.625681\nCWalks     34.160311\nLeagueN    -6.963243\nDivisionW  -6.620092\nPutOuts    13.162983\nAssists     5.085790\nErrors      5.743577\nNewLeagueN -6.512359\n\n, , 3 comps\n\n              Salary\nAtBat      30.978109\nHits       30.116447\nHmRun      20.336701\nRuns       27.155811\nRBI        29.335421\nWalks      27.950677\nYears      29.935424\nCAtBat     37.586247\nCHits      37.835850\nCHmRun     32.900245\nCRuns      38.144713\nCRBI       36.954979\nCWalks     35.059759\nLeagueN     6.548067\nDivisionW  -6.942130\nPutOuts    14.387197\nAssists    14.678390\nErrors     15.427186\nNewLeagueN  7.075892\n\n, , 4 comps\n\n               Salary\nAtBat       29.520862\nHits        29.000181\nHmRun       31.597403\nRuns        29.026827\nRBI         36.231434\nWalks       32.404842\nYears       26.080137\nCAtBat      33.710392\nCHits       34.178113\nCHmRun      37.369031\nCRuns       35.351888\nCRBI        37.332692\nCWalks      34.488907\nLeagueN     24.033667\nDivisionW  -10.089502\nPutOuts     26.571953\nAssists     -7.543320\nErrors      -2.246405\nNewLeagueN  24.653697\n\n, , 5 comps\n\n               Salary\nAtBat       27.694268\nHits        29.646194\nHmRun       25.730261\nRuns        33.481790\nRBI         33.235304\nWalks       37.877679\nYears       24.820145\nCAtBat      32.238744\nCHits       33.201307\nCHmRun      33.599843\nCRuns       37.075568\nCRBI        33.728773\nCWalks      38.302157\nLeagueN     24.734546\nDivisionW  -73.675797\nPutOuts     11.097175\nAssists     -6.114206\nErrors      -7.340447\nNewLeagueN  23.574869\n\n, , 6 comps\n\n               Salary\nAtBat       25.273285\nHits        25.819565\nHmRun       16.169143\nRuns        28.421368\nRBI         26.169617\nWalks       40.205973\nYears       26.395457\nCAtBat      32.797369\nCHits       33.780569\nCHmRun      30.483180\nCRuns       36.843164\nCRBI        33.242844\nCWalks      40.029970\nLeagueN     17.581534\nDivisionW  -82.399864\nPutOuts     51.909973\nAssists     -3.241560\nErrors      -4.425967\nNewLeagueN  17.212353\n\n, , 7 comps\n\n               Salary\nAtBat       27.977563\nHits        30.025511\nHmRun       -1.166145\nRuns        36.724811\nRBI         15.573862\nWalks       61.204572\nYears       25.788362\nCAtBat      33.071120\nCHits       34.127110\nCHmRun      22.814001\nCRuns       39.257148\nCRBI        29.517381\nCWalks      47.866368\nLeagueN     16.895528\nDivisionW  -74.763437\nPutOuts     48.229118\nAssists     -4.505340\nErrors     -18.631510\nNewLeagueN  18.148813\n\n, , 8 comps\n\n               Salary\nAtBat       28.894779\nHits        31.269987\nHmRun       -2.117039\nRuns        36.992026\nRBI         15.722128\nWalks       59.537377\nYears       26.310089\nCAtBat      33.512949\nCHits       34.702753\nCHmRun      22.128929\nCRuns       39.401350\nCRBI        29.562126\nCWalks      46.851897\nLeagueN     16.816210\nDivisionW  -74.844194\nPutOuts     48.383456\nAssists     -4.797926\nErrors     -19.560821\nNewLeagueN  18.396900\n\n, , 9 comps\n\n               Salary\nAtBat       31.588787\nHits        28.053736\nHmRun        7.083675\nRuns        28.472560\nRBI         18.929344\nWalks       56.701587\nYears       21.787342\nCAtBat      32.114883\nCHits       31.268723\nCHmRun      29.699273\nCRuns       36.938402\nCRBI        31.466240\nCWalks      47.987748\nLeagueN     18.648360\nDivisionW  -74.494016\nPutOuts     51.019658\nAssists     31.089710\nErrors     -50.830829\nNewLeagueN  18.895451\n\n, , 10 comps\n\n               Salary\nAtBat       49.366949\nHits        56.945636\nHmRun      -55.944625\nRuns        34.275461\nRBI         -9.144111\nWalks       30.921233\nYears      -96.415955\nCAtBat      14.681773\nCHits       25.801160\nCHmRun     135.260541\nCRuns       51.042755\nCRBI        80.319924\nCWalks      46.306896\nLeagueN     44.447574\nDivisionW  -75.492297\nPutOuts     50.925897\nAssists     17.200828\nErrors     -42.036656\nNewLeagueN -11.590862\n\n, , 11 comps\n\n               Salary\nAtBat       56.836309\nHits        59.598129\nHmRun      -78.166380\nRuns        -1.486379\nRBI         21.689129\nWalks       51.048130\nYears      -92.608432\nCAtBat      10.927660\nCHits       24.000140\nCHmRun     143.663268\nCRuns       37.708144\nCRBI        92.380904\nCWalks      35.945707\nLeagueN     23.954772\nDivisionW  -77.516613\nPutOuts     45.938939\nAssists     12.914266\nErrors     -40.169010\nNewLeagueN   4.763255\n\n, , 12 comps\n\n                Salary\nAtBat        55.347029\nHits         55.674880\nHmRun       -70.702147\nRuns         11.058391\nRBI           7.478159\nWalks        43.670028\nYears      -105.439583\nCAtBat       11.838445\nCHits        25.367169\nCHmRun      149.102001\nCRuns        45.162903\nCRBI         90.774398\nCWalks       38.953637\nLeagueN     -13.276625\nDivisionW   -78.201094\nPutOuts      46.618093\nAssists      14.620874\nErrors      -39.060853\nNewLeagueN   43.037827\n\n, , 13 comps\n\n                Salary\nAtBat        38.421707\nHits         53.918821\nHmRun       -67.263177\nRuns         -8.469744\nRBI          40.386940\nWalks        39.097928\nYears      -163.432940\nCAtBat       32.659484\nCHits        55.742749\nCHmRun       98.992985\nCRuns        70.353720\nCRBI         90.929778\nCWalks       61.228717\nLeagueN     -12.522949\nDivisionW   -76.066629\nPutOuts      47.064574\nAssists      12.674980\nErrors      -41.573517\nNewLeagueN   39.637213\n\n, , 14 comps\n\n                Salary\nAtBat       -66.550588\nHits        -20.213068\nHmRun       -66.339828\nRuns         76.120546\nRBI          43.287033\nWalks       135.625420\nYears      -184.350168\nCAtBat       78.872226\nCHits       150.229310\nCHmRun      105.635149\nCRuns       114.000596\nCRBI        157.542071\nCWalks     -196.022740\nLeagueN      -2.180342\nDivisionW   -78.940597\nPutOuts      49.088085\nAssists      45.725246\nErrors      -52.227274\nNewLeagueN   30.622401\n\n, , 15 comps\n\n                Salary\nAtBat      -121.459780\nHits        -23.002074\nHmRun      -104.458650\nRuns        126.565793\nRBI          98.101331\nWalks       113.753579\nYears      -171.211964\nCAtBat       59.519948\nCHits       131.168938\nCHmRun      112.956111\nCRuns       110.476793\nCRBI        161.475074\nCWalks     -173.432411\nLeagueN      -4.865856\nDivisionW   -74.502925\nPutOuts      53.837079\nAssists      58.553401\nErrors      -54.760750\nNewLeagueN   35.701506\n\n, , 16 comps\n\n               Salary\nAtBat      -328.08385\nHits        250.93610\nHmRun       -34.58653\nRuns         53.54866\nRBI          19.59952\nWalks       147.05938\nYears      -157.02262\nCAtBat       18.31693\nCHits       172.63981\nCHmRun      117.45729\nCRuns        61.33616\nCRBI        190.78503\nCWalks     -173.15364\nLeagueN     -17.29380\nDivisionW   -74.85403\nPutOuts      56.93537\nAssists      73.15221\nErrors      -52.93703\nNewLeagueN   44.86176\n\n, , 17 comps\n\n               Salary\nAtBat      -351.55177\nHits        292.17572\nHmRun       -52.72531\nRuns        -14.83650\nRBI          66.80566\nWalks       163.83242\nYears      -132.13606\nCAtBat      -31.92205\nCHits       156.06779\nCHmRun      215.40176\nCRuns       301.02633\nCRBI        -50.05894\nCWalks     -227.25468\nLeagueN     -13.50245\nDivisionW   -67.27012\nPutOuts      63.98341\nAssists      73.34561\nErrors      -52.83522\nNewLeagueN   42.24517\n\n, , 18 comps\n\n               Salary\nAtBat      -288.70379\nHits        266.95959\nHmRun       -21.34636\nRuns        -40.87854\nRBI          34.80951\nWalks       154.59900\nYears       -76.13620\nCAtBat     -435.82608\nCHits       170.25965\nCHmRun       75.55242\nCRuns       527.01922\nCRBI        195.52997\nCWalks     -230.84672\nLeagueN     -13.03671\nDivisionW   -64.50601\nPutOuts      62.00105\nAssists      79.54987\nErrors      -52.31389\nNewLeagueN   45.43185\n\n, , 19 comps\n\n               Salary\nAtBat      -281.30006\nHits        253.50186\nHmRun       -24.77878\nRuns        -33.71295\nRBI          38.63129\nWalks       151.76043\nYears       -75.83429\nCAtBat     -479.63750\nCHits       257.56892\nCHmRun       94.05591\nCRuns       489.46102\nCRBI        161.92491\nCWalks     -218.86125\nLeagueN     -12.18060\nDivisionW   -64.12921\nPutOuts      61.82955\nAssists      80.63960\nErrors      -53.17173\nNewLeagueN   44.71078\n```\n:::\n\n```{.r .cell-code}\nrmsep.cv_salary.pcr = min(RMSEP(salary.pcr, \"CV\")$val[,,])\nrmsep.cv_salary.pcr # 348.3224\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 343.3036\n```\n:::\n\n```{.r .cell-code}\nnb.com_rmsep.cv_salary.pcr = which.min(RMSEP(salary.pcr, \"CV\")$val[,,])\nnb.com_rmsep.cv_salary.pcr # 14 comps (sans compter l'intercept)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n16 comps \n      17 \n```\n:::\n\n```{.r .cell-code}\n# Question 3 --------------------------------------------------------------\n\nsalary.pls = plsr(Salary ~., scale = TRUE, data = df_train, validation = \"CV\", segments=10)\nsummary(salary.pls)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nData: \tX dimension: 197 19 \n\tY dimension: 197 1\nFit method: kernelpls\nNumber of components considered: 19\n\nVALIDATION: RMSEP\nCross-validated using 10 random segments.\n       (Intercept)  1 comps  2 comps  3 comps  4 comps  5 comps  6 comps\nCV           480.9    358.5    357.8    353.7    352.7    353.8    350.3\nadjCV        480.9    358.0    356.2    352.7    351.3    351.4    348.0\n       7 comps  8 comps  9 comps  10 comps  11 comps  12 comps  13 comps\nCV       345.3    342.5    344.9     347.1     343.3     345.0     346.1\nadjCV    343.3    340.3    342.7     344.4     340.9     342.6     343.5\n       14 comps  15 comps  16 comps  17 comps  18 comps  19 comps\nCV        345.5     344.8     345.3     345.7     344.9     347.1\nadjCV     342.9     342.3     342.8     343.1     342.4     344.5\n\nTRAINING: % variance explained\n        1 comps  2 comps  3 comps  4 comps  5 comps  6 comps  7 comps  8 comps\nX         40.40    48.72    61.75    72.99    77.54    84.95    89.01    90.49\nSalary    47.51    51.90    53.48    55.13    57.67    58.38    58.99    59.99\n        9 comps  10 comps  11 comps  12 comps  13 comps  14 comps  15 comps\nX         93.83     94.97     96.10     97.86     98.49     98.72     99.10\nSalary    60.15     60.51     60.81     60.92     61.01     61.17     61.22\n        16 comps  17 comps  18 comps  19 comps\nX          99.52     99.79     99.99    100.00\nSalary     61.24     61.26     61.27     61.27\n```\n:::\n\n```{.r .cell-code}\npar(mfrow=c(1,2))\nvalidationplot(salary.pls, val.type = \"RMSEP\") \nvalidationplot(salary.pls, val.type = \"MSEP\") \n```\n\n::: {.cell-output-display}\n![](Exercice_06_files/figure-html/unnamed-chunk-15-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# validationplot(salary.pls, val.type = \"R2\") # inutile car augment tout le temps en fonction des composantes \npar(mfrow=c(1,1))\n\n\nsalary.pls$coefficients\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n, , 1 comps\n\n                Salary\nAtBat       26.9353756\nHits        29.0914017\nHmRun       21.5813895\nRuns        28.4189606\nRBI         30.1156112\nWalks       31.0681581\nYears       26.2379015\nCAtBat      36.1229141\nCHits       37.9113655\nCHmRun      37.4079931\nCRuns       39.5445512\nCRBI        39.1182351\nCWalks      34.7580902\nLeagueN     -0.3538253\nDivisionW  -16.0742750\nPutOuts     17.8380872\nAssists      3.7400855\nErrors       1.2864800\nNewLeagueN   0.4454052\n\n, , 2 comps\n\n                Salary\nAtBat       19.8233405\nHits        39.2961212\nHmRun        0.3623952\nRuns        37.3164931\nRBI         27.5572930\nWalks       57.7728412\nYears       -4.0247254\nCAtBat      27.5421019\nCHits       39.2468739\nCHmRun      45.0188839\nCRuns       44.9073707\nCRBI        43.9553483\nCWalks      26.2578367\nLeagueN     30.4933346\nDivisionW  -69.6016504\nPutOuts     46.5242570\nAssists      2.3099920\nErrors     -19.3446993\nNewLeagueN  33.9449685\n\n, , 3 comps\n\n               Salary\nAtBat       -3.037829\nHits        38.411405\nHmRun      -27.771874\nRuns        32.777154\nRBI         15.671191\nWalks       65.943071\nYears      -25.771207\nCAtBat      27.872559\nCHits       51.591750\nCHmRun      63.088518\nCRuns       60.202210\nCRBI        59.989673\nCWalks      17.376764\nLeagueN     18.349990\nDivisionW  -92.750869\nPutOuts     51.838510\nAssists      5.622295\nErrors     -40.244363\nNewLeagueN  25.141098\n\n, , 4 comps\n\n               Salary\nAtBat       -19.38728\nHits         57.46942\nHmRun       -54.64517\nRuns         42.85148\nRBI          16.70187\nWalks        84.15661\nYears       -74.43326\nCAtBat       17.98770\nCHits        61.92724\nCHmRun       84.12405\nCRuns        74.20679\nCRBI         76.43975\nCWalks      -12.57745\nLeagueN      -4.85374\nDivisionW  -103.58380\nPutOuts      59.78793\nAssists      26.98258\nErrors      -49.99876\nNewLeagueN    8.51758\n\n, , 5 comps\n\n                 Salary\nAtBat       -73.7227204\nHits         82.7457469\nHmRun       -95.5746723\nRuns         40.8414896\nRBI          24.0074687\nWalks        96.5482302\nYears      -158.2133932\nCAtBat        9.1105255\nCHits        97.6294411\nCHmRun      142.4006485\nCRuns       112.5068728\nCRBI        126.4148329\nCWalks      -78.6915093\nLeagueN      -0.2756901\nDivisionW   -69.9480646\nPutOuts      62.6367002\nAssists      63.8103365\nErrors      -55.1459097\nNewLeagueN   28.5507885\n\n, , 6 comps\n\n                 Salary\nAtBat      -100.4713814\nHits         90.5896473\nHmRun       -86.3779566\nRuns         43.3738605\nRBI          39.2909203\nWalks        98.9001654\nYears      -183.1740922\nCAtBat        0.8231578\nCHits       107.3328161\nCHmRun      161.6217181\nCRuns       123.7708948\nCRBI        140.6508642\nCWalks     -108.2937029\nLeagueN      -3.1651519\nDivisionW   -65.4156052\nPutOuts      58.4016492\nAssists      53.4171538\nErrors      -67.5903485\nNewLeagueN   32.0798954\n\n, , 7 comps\n\n                Salary\nAtBat      -146.172558\nHits        102.494162\nHmRun       -75.753649\nRuns         46.219584\nRBI          54.794308\nWalks       103.218799\nYears      -186.520833\nCAtBat       -6.045389\nCHits       127.605374\nCHmRun      159.890703\nCRuns       144.729442\nCRBI        147.626306\nCWalks     -147.051475\nLeagueN      -7.358452\nDivisionW   -84.361986\nPutOuts      40.367850\nAssists      60.081719\nErrors      -50.614353\nNewLeagueN   38.743684\n\n, , 8 comps\n\n               Salary\nAtBat      -252.33160\nHits        134.13418\nHmRun       -66.82281\nRuns         58.05549\nRBI          69.45178\nWalks       148.76149\nYears      -163.66342\nCAtBat      -24.65747\nCHits       171.98957\nCHmRun      123.03494\nCRuns       193.46954\nCRBI        144.58098\nCWalks     -217.81305\nLeagueN     -24.32122\nDivisionW   -74.68196\nPutOuts      63.76183\nAssists      57.56840\nErrors      -38.28244\nNewLeagueN   49.53697\n\n, , 9 comps\n\n               Salary\nAtBat      -269.41556\nHits        152.97906\nHmRun       -65.39652\nRuns         61.01308\nRBI          67.35076\nWalks       159.27169\nYears      -155.54782\nCAtBat      -36.01509\nCHits       177.06447\nCHmRun      116.91509\nCRuns       206.99727\nCRBI        138.85059\nCWalks     -223.79040\nLeagueN     -20.67659\nDivisionW   -70.08482\nPutOuts      51.43532\nAssists      64.10520\nErrors      -51.25288\nNewLeagueN   50.87179\n\n, , 10 comps\n\n                Salary\nAtBat      -316.468519\nHits        215.485167\nHmRun       -39.725024\nRuns         37.856356\nRBI          59.107640\nWalks       151.202591\nYears      -128.575153\nCAtBat      -90.136349\nCHits       178.237594\nCHmRun      125.658776\nCRuns       247.666030\nCRBI        121.206697\nCWalks     -229.306146\nLeagueN      -6.178706\nDivisionW   -69.875533\nPutOuts      64.088767\nAssists      98.078355\nErrors      -73.707605\nNewLeagueN   38.175093\n\n, , 11 comps\n\n                 Salary\nAtBat      -356.8707979\nHits        280.8913981\nHmRun       -29.8608890\nRuns          9.6923805\nRBI          39.9092461\nWalks       163.3174322\nYears      -115.0688597\nCAtBat     -161.5057900\nCHits       171.1970377\nCHmRun      147.8075296\nCRuns       297.5757211\nCRBI        102.4921336\nCWalks     -212.5724165\nLeagueN       0.2739336\nDivisionW   -66.7711824\nPutOuts      62.7717261\nAssists      87.2071308\nErrors      -54.1110122\nNewLeagueN   30.1309932\n\n, , 12 comps\n\n                Salary\nAtBat      -359.105420\nHits        314.396259\nHmRun       -35.693741\nRuns         -4.366186\nRBI          35.940724\nWalks       154.179734\nYears      -106.730098\nCAtBat     -188.828072\nCHits       174.115098\nCHmRun      149.478644\nCRuns       322.723033\nCRBI         95.886943\nCWalks     -214.748216\nLeagueN      -4.942140\nDivisionW   -67.053774\nPutOuts      63.449736\nAssists      75.487391\nErrors      -49.977351\nNewLeagueN   35.241054\n\n, , 13 comps\n\n               Salary\nAtBat      -349.25966\nHits        319.32436\nHmRun       -29.33053\nRuns        -35.50881\nRBI          40.83683\nWalks       161.55809\nYears      -104.10725\nCAtBat     -227.51215\nCHits       176.56672\nCHmRun      145.90453\nCRuns       362.54096\nCRBI         89.07677\nCWalks     -213.31731\nLeagueN     -26.38824\nDivisionW   -67.04922\nPutOuts      62.12044\nAssists      79.01766\nErrors      -52.68239\nNewLeagueN   55.80084\n\n, , 14 comps\n\n               Salary\nAtBat      -307.65292\nHits        287.65919\nHmRun       -18.92452\nRuns        -52.17903\nRBI          36.12637\nWalks       160.48603\nYears      -104.78826\nCAtBat     -316.94308\nCHits       192.01962\nCHmRun      123.20659\nCRuns       479.82066\nCRBI         83.86492\nCWalks     -230.85872\nLeagueN     -12.66552\nDivisionW   -64.93059\nPutOuts      63.05662\nAssists      75.27033\nErrors      -52.32518\nNewLeagueN   43.46205\n\n, , 15 comps\n\n                Salary\nAtBat      -294.326632\nHits        270.210684\nHmRun       -31.777939\nRuns        -50.252383\nRBI          48.862272\nWalks       163.516423\nYears       -82.049050\nCAtBat     -367.163642\nCHits       186.686888\nCHmRun      125.246726\nCRuns       506.465145\nCRBI         99.604613\nCWalks     -242.437510\nLeagueN      -8.774019\nDivisionW   -64.417660\nPutOuts      62.503576\nAssists      76.951380\nErrors      -52.460603\nNewLeagueN   40.121254\n\n, , 16 comps\n\n               Salary\nAtBat      -294.84456\nHits        262.30280\nHmRun       -32.60577\nRuns        -34.70186\nRBI          48.09637\nWalks       154.27545\nYears       -78.00604\nCAtBat     -397.02734\nCHits       186.27429\nCHmRun      117.88323\nCRuns       517.22199\nCRBI        117.23509\nCWalks     -234.88174\nLeagueN     -14.49323\nDivisionW   -63.64453\nPutOuts      63.59394\nAssists      79.82276\nErrors      -52.67686\nNewLeagueN   47.24134\n\n, , 17 comps\n\n               Salary\nAtBat      -293.20458\nHits        261.08796\nHmRun       -31.72453\nRuns        -36.72746\nRBI          52.25094\nWalks       150.72884\nYears       -79.76772\nCAtBat     -432.45753\nCHits       196.11082\nCHmRun       92.36781\nCRuns       517.73233\nCRBI        155.47543\nCWalks     -222.46696\nLeagueN     -11.71791\nDivisionW   -63.33364\nPutOuts      62.91382\nAssists      80.20418\nErrors      -53.04287\nNewLeagueN   44.09811\n\n, , 18 comps\n\n               Salary\nAtBat      -285.52859\nHits        261.52483\nHmRun       -22.54761\nRuns        -38.06879\nRBI          36.10966\nWalks       153.44135\nYears       -75.85029\nCAtBat     -454.55716\nCHits       205.05771\nCHmRun       82.32316\nCRuns       512.55572\nCRBI        183.29992\nCWalks     -226.05553\nLeagueN     -12.70183\nDivisionW   -64.35903\nPutOuts      61.91573\nAssists      80.00163\nErrors      -52.65145\nNewLeagueN   45.16044\n\n, , 19 comps\n\n               Salary\nAtBat      -281.30006\nHits        253.50186\nHmRun       -24.77878\nRuns        -33.71295\nRBI          38.63129\nWalks       151.76043\nYears       -75.83429\nCAtBat     -479.63750\nCHits       257.56892\nCHmRun       94.05591\nCRuns       489.46102\nCRBI        161.92491\nCWalks     -218.86125\nLeagueN     -12.18060\nDivisionW   -64.12921\nPutOuts      61.82955\nAssists      80.63960\nErrors      -53.17173\nNewLeagueN   44.71078\n```\n:::\n\n```{.r .cell-code}\nrmsep.cv_salary.pls = min(RMSEP(salary.pls, \"CV\")$val[,,])\nrmsep.cv_salary.pls # 348.3051\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 342.4799\n```\n:::\n\n```{.r .cell-code}\nnb.com_rmsep.cv_salary.pls = which.min(RMSEP(salary.pls, \"CV\")$val[,,])\nnb.com_rmsep.cv_salary.pls # 12 comps (sans compter l'intercept)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n8 comps \n      9 \n```\n:::\n\n```{.r .cell-code}\n# Question 4 --------------------------------------------------------------\n\n# Calcul à la main entre la prdiction et le df_test\n\nhat_df_test_salary.pcr = predict(salary.pcr, df_test)\n\nrmsep_salary.pcr = sqrt(mean((hat_df_test_salary.pcr - df_test$Salary)**2))\nrmsep_salary.pcr\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 346.2538\n```\n:::\n\n```{.r .cell-code}\n# 346.1988\n\n\nhat_df_test_salary.pls = predict(salary.pls, df_test)\n\nrmsep_salary.pls = sqrt(mean((hat_df_test_salary.pls - df_test$Salary)**2))\nrmsep_salary.pls\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 359.1725\n```\n:::\n\n```{.r .cell-code}\n# 356.0666\n\n\n# Le rmsep est minimum pour PCR sur les 3 méthodes (PCR->PLS->step)\n\n\n# Question 5 --------------------------------------------------------------\n\n# refaire les méthodes en faisant le 10-fold 100 fois \n\nres.pcr = NULL\nfor(i in 1:100){\n  \n  # modele PCR\n  pcr.fit = pcr(Salary~.,\n                data = df,\n                scale = TRUE,\n                subset = indices_train,\n                validation = \"CV\",\n                segments = 10)\n  \n  # RMSEP\n  RMSEP.cv = RMSEP(pcr.fit,'CV')$val[,,]\n  \n  # On stocke les resultats\n  res.pcr = cbind(res.pcr, RMSEP.cv)\n}\n\nmatplot(res.pcr, type = 'l', col = 1:100, lty = 1, main = \"Evolution RMSEP pour 100 PCR avec CV\")\n# On regarde le RMSEP moyen que l'on peut obternir \n# pour 100 decoupages différents de notre jeu de données\npcr.mean.cv = apply(res.pcr, MARGIN = 1, FUN = mean) # for a matrix 1 indicates rows\nlines(pcr.mean.cv, col = \"darkred\", lwd=4)\n```\n\n::: {.cell-output-display}\n![](Exercice_06_files/figure-html/unnamed-chunk-15-3.png){width=672}\n:::\n\n```{.r .cell-code}\nwhich.min(pcr.mean.cv) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n16 comps \n      17 \n```\n:::\n\n```{.r .cell-code}\ncoef(pcr.fit, ncomp = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n, , 5 comps\n\n               Salary\nAtBat       27.694268\nHits        29.646194\nHmRun       25.730261\nRuns        33.481790\nRBI         33.235304\nWalks       37.877679\nYears       24.820145\nCAtBat      32.238744\nCHits       33.201307\nCHmRun      33.599843\nCRuns       37.075568\nCRBI        33.728773\nCWalks      38.302157\nLeagueN     24.734546\nDivisionW  -73.675797\nPutOuts     11.097175\nAssists     -6.114206\nErrors      -7.340447\nNewLeagueN  23.574869\n```\n:::\n\n```{.r .cell-code}\nres.pls = NULL\nfor(i in 1:100){\n  \n  # modele PCR\n  pls.fit = plsr(Salary~.,\n                data = df,\n                scale = TRUE,\n                subset = indices_train,\n                validation = \"CV\",\n                segments = 10)\n  \n  # RMSEP\n  RMSEP.cv = RMSEP(pls.fit,'CV')$val[,,]\n  \n  # On stocke les resultats\n  res.pls = cbind(res.pls, RMSEP.cv)\n}\n\nmatplot(res.pls, type = 'l', col = 1:100, lty = 1, main = \"Evolution RMSEP pour 100 PLS avec CV\")\npls.mean.cv = apply(res.pls, MARGIN = 1, FUN = mean) \nlines(pls.mean.cv, col = \"darkred\", lwd=4)\n```\n\n::: {.cell-output-display}\n![](Exercice_06_files/figure-html/unnamed-chunk-15-4.png){width=672}\n:::\n\n```{.r .cell-code}\nwhich.min(pls.mean.cv)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n8 comps \n      9 \n```\n:::\n\n```{.r .cell-code}\ncoef(pls.fit, ncomp = 9)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n, , 9 comps\n\n               Salary\nAtBat      -269.41556\nHits        152.97906\nHmRun       -65.39652\nRuns         61.01308\nRBI          67.35076\nWalks       159.27169\nYears      -155.54782\nCAtBat      -36.01509\nCHits       177.06447\nCHmRun      116.91509\nCRuns       206.99727\nCRBI        138.85059\nCWalks     -223.79040\nLeagueN     -20.67659\nDivisionW   -70.08482\nPutOuts      51.43532\nAssists      64.10520\nErrors      -51.25288\nNewLeagueN   50.87179\n```\n:::\n\n```{.r .cell-code}\npar(mfrow=c(1,2))\nmatplot(res.pcr, type = 'l', col = 1:100, lty = 1, main = \"Evolution RMSEP pour 100 PCR\")\nlines(pcr.mean.cv, col = \"darkred\", lwd=4)\nabline(v=which.min(pcr.mean.cv) )\n\nmatplot(res.pls, type = 'l', col = 1:100, lty = 1, main = \"Evolution RMSEP pour 100 PLS\")\nlines(pls.mean.cv, col = \"darkred\", lwd=4)\nabline(v=which.min(pls.mean.cv) )\n```\n\n::: {.cell-output-display}\n![](Exercice_06_files/figure-html/unnamed-chunk-15-5.png){width=672}\n:::\n\n```{.r .cell-code}\npar(mfrow=c(1,1))\n\n\n# Question 6 --------------------------------------------------------------\n\n# Faire modèles finaux avec ncomp= which.min(ncomp)\n\npcr.fit_final = pcr(Salary~.,\n                    data = df, \n                    ncomp = which.min(pcr.mean.cv)-1,\n                    scale = TRUE,\n                    subset = indices_train,\n                    validation = \"CV\",\n                    segments = 10 )\n\n\npls.fit_final = plsr(Salary~.,\n                    data = df, \n                    ncomp = which.min(pls.mean.cv)-1,\n                    scale = TRUE,\n                    subset = indices_train,\n                    validation = \"CV\",\n                    segments = 10 )\n\nsummary(pcr.fit_final)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nData: \tX dimension: 197 19 \n\tY dimension: 197 1\nFit method: svdpc\nNumber of components considered: 16\n\nVALIDATION: RMSEP\nCross-validated using 10 random segments.\n       (Intercept)  1 comps  2 comps  3 comps  4 comps  5 comps  6 comps\nCV           480.9    357.9    361.5    362.4    361.0    355.4    359.9\nadjCV        480.9    357.6    361.0    361.8    360.2    354.5    358.8\n       7 comps  8 comps  9 comps  10 comps  11 comps  12 comps  13 comps\nCV       359.3    361.9    363.1     353.0     353.7     353.3     353.9\nadjCV    358.1    360.5    361.7     351.4     352.3     351.8     352.8\n       14 comps  15 comps  16 comps\nCV        345.4     347.6     343.9\nadjCV     343.4     345.6     341.7\n\nTRAINING: % variance explained\n        1 comps  2 comps  3 comps  4 comps  5 comps  6 comps  7 comps  8 comps\nX         40.51    60.57    71.15    79.89    85.15    89.29    92.85    95.30\nSalary    45.77    45.85    46.38    47.72    49.65    50.36    50.76    50.76\n        9 comps  10 comps  11 comps  12 comps  13 comps  14 comps  15 comps\nX         96.53     97.46     98.13     98.74     99.16     99.51     99.77\nSalary    51.02     53.82     54.07     54.25     54.60     58.06     58.32\n        16 comps\nX          99.90\nSalary     59.87\n```\n:::\n\n```{.r .cell-code}\nmin(RMSEP(pcr.fit_final,'CV')$val[,,])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 343.9382\n```\n:::\n\n```{.r .cell-code}\n#  356.9369\nwhich.min(RMSEP(pcr.fit_final,'CV')$val[,,])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n16 comps \n      17 \n```\n:::\n\n```{.r .cell-code}\n# 18 comps\n\nsummary(pls.fit_final)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nData: \tX dimension: 197 19 \n\tY dimension: 197 1\nFit method: kernelpls\nNumber of components considered: 8\n\nVALIDATION: RMSEP\nCross-validated using 10 random segments.\n       (Intercept)  1 comps  2 comps  3 comps  4 comps  5 comps  6 comps\nCV           480.9    357.2    365.0      354    359.6    360.8    356.9\nadjCV        480.9    356.8    362.7      353    358.1    357.9    354.0\n       7 comps  8 comps\nCV       351.5    345.4\nadjCV    349.2    343.0\n\nTRAINING: % variance explained\n        1 comps  2 comps  3 comps  4 comps  5 comps  6 comps  7 comps  8 comps\nX         40.40    48.72    61.75    72.99    77.54    84.95    89.01    90.49\nSalary    47.51    51.90    53.48    55.13    57.67    58.38    58.99    59.99\n```\n:::\n\n```{.r .cell-code}\nmin(RMSEP(pls.fit_final,'CV')$val[,,])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 345.3908\n```\n:::\n\n```{.r .cell-code}\n# 352.8074\nwhich.min(RMSEP(pls.fit_final,'CV')$val[,,])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n8 comps \n      9 \n```\n:::\n\n```{.r .cell-code}\n# 10 comps\n\n\n\n\n# Question 7 (4bis) --------------------------------------------------------------\n\n# Calcul à la main entre la prdiction et le df_test\nrmsep_mod.step\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): objet 'rmsep_mod.step' introuvable\n```\n:::\n\n```{.r .cell-code}\n# 357.7089\n\n\nhat_df_test_salary.pcr = predict(pcr.fit_final, df_test)\n\nrmsep_salary.pcr = sqrt(mean((hat_df_test_salary.pcr - df_test$Salary)**2))\nrmsep_salary.pcr\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 343.2151\n```\n:::\n\n```{.r .cell-code}\n# 312.8734\n\n\nhat_df_test_salary.pls = predict(pls.fit_final, df_test)\n\nrmsep_salary.pls = sqrt(mean((hat_df_test_salary.pls - df_test$Salary)**2))\nrmsep_salary.pls\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 355.1609\n```\n:::\n\n```{.r .cell-code}\n# 315.9921\n\n# Le rmsep est minimum pour PCR sur les 3 méthodes (PCR->PLS---->step)\n\n\n## FAIRE UNE BELLE CONCLUSION  SUR CHOIX DE MODELE EN GARDANT UN ESPRIT CRITIQUE \n# LE MODELE STEP N'EST PAS SI MAL CAR NE CONTIENT QUE 3 VAR ET ON EST SUR UN JEU DE DONNEES AVEC NA \n# DONC PCR ET PLS PREND TOUT LES VAR POUR PRED MAIS NA PEUVENT IMPACTER\n```\n:::\n",
    "supporting": [
      "Exercice_06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}