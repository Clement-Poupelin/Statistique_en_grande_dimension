---
title: "Exercice 1"
author: "Clément Poupelin"
date: "`r Sys.Date()`"
format: 
  html:
    embed-resources: false
    toc: true
    code-fold: true
    code-summary: "Show the code"
    code-tools: true
    toc-location: right
    page-layout: article
    code-overflow: wrap
toc: true
number-sections: false
editor: visual
categories: ["TP"]
image: "/img/baseball.png"
description: "Il s'agit d'une première utilisation des méthodes de regression avec selection de variable via des approches stepwise sur des données de baseball"
---


# Intervenant.e.s

### Rédacteur principal.e.s

- **Clément Poupelin**, [clementjc.poupelin\@gmail.com](mailto:clementjc.poupelin@gmail.com){.email}\


### Relecteur.trice.s

- 



# Setup

:::: panel-tabset
## packages

```{r, setup, warning=FALSE, message=FALSE}
# Données
library(ISLR)         # Hitters data 
library(dplyr)        # manipulation des données

# PCA
library(FactoMineR)
library(factoextra)

# Inférence
library(leaps)        # regsubsets 
library(car)          # pour VIF

# Plots
## ggplot
library(ggplot2)
library(reshape2)     # transformer les données en format long
library(gridExtra)

## for pairs panel
library(psych)
library(RColorBrewer)
```

## Fonctions

::: panel-tabset
### Critères

On rappel que $SCR = \sum_i (y_i - f(x_i))^2$ et $SCT = \sum_i (y_i - \bar{y})^2$.\

Ainsi, on peut aretrouver les différents critères :

$$ R^2 = 1 - \frac{SCR}{SCT}$$

```{r}
r2_fun <- function(y, SCR){
  # r2 = SSE/SST = (SST - SSR)/SST = 1 - ssr/sst
  SCT <- sum((y - mean(y) )^2)
  r2 <- 1 - SCR/SCT
  return(r2)
}
```

$$ R^2_{adjusted} = 1 - \frac{SCR (n-1)}{SCT(n-(p+1))}$$

```{r}
r2a_fun <- function(y, SCR){
  n <- dim(Hitters_Without_NA)[1]
  p <- 1:(dim(Hitters_Without_NA)[2]-1)
  SCT <- sum((y - mean(y) )^2)
  r2a <- 1 - (SCR/(n-(p+1)))/(SCT/(n-1))
  return(r2a)
}
```

$$ C_p = \frac{SCR}{\sigma^2} + 2(p+1) - n$$

```{r}
cp_fun <- function(mod, SCR){
  sig <- summary(mod)$sigma
  n <- dim(Hitters_Without_NA)[1]
  p <- 1:(dim(Hitters_Without_NA)[2]-1)
  cp <- SCR/sig^2 + 2*(p+1) - n
  return(cp)
}
```

$$ AIC = n\text{log}\left(\frac{SCR}{n}\right) + 2(p+1)$$

```{r}
aic_fun <- function(SCR){
  n <- dim(Hitters_Without_NA)[1]
  p <- 1:(dim(Hitters_Without_NA)[2]-1)
  aic <- n * log(SCR/n) + 2*(p+1)
  return(aic)
}
```

$$ BIC = n\text{log}\left(\frac{SCR}{n}\right) + \text{log}(n)(p+1)$$

```{r}
bic_fun <- function(SCR){
  n <- dim(Hitters_Without_NA)[1]
  p <- 1:(dim(Hitters_Without_NA)[2]-1)
  bic <- n * log(SCR/n) + log(n)*(p+1)
  return(bic)
}
```

### plot pour nos critères

```{r}
Criteria_plot <- function(Criteria, crit_name = "Critère") {
  # Création d'un data frame pour ggplot
  df_criteria <- data.frame(
    nb_var = seq_along(Criteria),  # Nombre de variables du modèle
    Criteria = Criteria            # Critère
  )

  # Création du plot avec ggplot2
  g <- ggplot(df_criteria, aes(x = nb_var, y = Criteria)) +
    geom_line(color = "#0072B2", linewidth = 1) +  
    geom_point(color = "#D55E00", size = 4) + 
    labs(
      title = paste("Évolution de", crit_name, "en fonction du nombre de variables"),
      x = "Nombre de variables sélectionnées",
      y = crit_name
    ) +
    theme_minimal() + 
    theme(
      plot.title = element_text(hjust = 0.5, face = "bold", size = 26),  # Titre centré et agrandi
      axis.title.x = element_text(face = "bold", size = 22),
      axis.title.y = element_text(face = "bold", size = 22),
      axis.text = element_text(size = 20)
    )

  return(g)
}
```

### Meilleur modèle après regsubset

```{r}
Best_model <- function(model, criteria_df){
  ## On a d'abord les critères à maximiser
  for(i in 1:2){
    criteria_name <- colnames(criteria_df)[i]
    criteria <- criteria_df[,i]
    
    best_model_criteria <- which.max(criteria)
    selected_vars <- summary(model)$which[best_model_criteria,]
    
    cat("Meilleur modèle selon", criteria_name," : Modèle avec", best_model_criteria, "variables\n", 
        rownames(as.data.frame(selected_vars)[as.data.frame(selected_vars)[, 1] == TRUE, , drop = FALSE]), "\n", "\n")
  }
  ## On a ensuite les critères à minimiser
  for(i in 3:5){
    criteria_name <- colnames(criteria_df)[i]
    criteria <- criteria_df[,i]
    
    best_model_criteria <- which.min(criteria)
    selected_vars <- summary(model)$which[best_model_criteria,]
    
    cat("Meilleur modèle selon", criteria_name," : Modèle avec", best_model_criteria, "variables\n", 
        rownames(as.data.frame(selected_vars)[as.data.frame(selected_vars)[, 1] == TRUE, , drop = FALSE]), "\n", "\n")
  }
}
```
:::
::::

# Données

On étudie le jeu de données [**Hitters**](https://rdrr.io/cran/ISLR/man/Hitters.html) disponible dans la libraire { *ISLR* } de *R*.

Il s'agit d'un je de données de la Major League Baseball provenant des saisons de 1986 et 1987.

Le jeu de données possède `r dim(Hitters)[1]` lignes/individus pour les différents joueurs et `r dim(Hitters)[2]` variables.

Parmi les variables, on trouve les informations suivantes :

```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(tidyverse)
library(kableExtra)
identity_keys <- cell_spec(
  x = colnames(Hitters), format = "html", bold = TRUE)
identity_values <- c("Number of times at bat in 1986", "Number of hits in 1986", "Number of home runs in 1986", "Number of runs in 1986", "Number of runs batted in in 1986", "Number of walks in 1986", "Number of years in the major leagues", "Number of times at bat during his career", "Number of hits during his career", "Number of home runs during his career", "Number of runs during his career", "Number of runs batted in during his career", "Number of walks during his career", "A factor with levels A and N indicating player's league at the end of 1986", "A factor with levels E and W indicating player's division at the end of 1986", "Number of put outs in 1986", "Number of assists in 1986", "Number of errors in 1986", "1987 annual salary on opening day in thousands of dollars", "A factor with levels A and N indicating player's league at the beginning of 1987")
tibble(
  keys = identity_keys, 
  values = identity_values, 
) %>% 
  kbl(
    format = "html", 
    booktabs = TRUE, 
    escape = FALSE, 
    col.names = NULL
  ) %>% 
  kable_styling(bootstrap_options = c("hover", "condensed"))
```

Regardons maintenant le *summary*() pour examiner les différentes variables.

```{r}
# ?Hitters
Hitters %>%
  summary()
```

::: callout-warning
On peut déjà remarquer la présence de 59 valeurs manquantes pour la variable *Salary*.
:::

On va donc commencer par s'en débarasser (il ne s'agit que de 59 lignes sur 322). Puis on va également créé un sous jeu de données ne conservant que les variables quantitatives .

```{r}
Hitters_Without_NA <- Hitters %>% na.omit()
Hitters_Without_NA_quant <- Hitters_Without_NA %>% subset(, select = -c(League, Division, NewLeague))
```

# Analyse descriptive

:::: panel-tabset
## Boxplot

On peut regarder un peu la distribution de nos différents variables quantitatives via des boxplots.

```{r, message=FALSE, fig.height=6, fig.width=8}
# Transformer les données en format long pour ggplot
Hitters_long <- melt(Hitters_Without_NA_quant)

ggplot(Hitters_long, aes(x = variable, y = value, fill = variable)) +
  geom_boxplot() +
  scale_fill_viridis_d() +  # Palette de couleurs harmonieuse
  labs(title = "Distribution des Variables (Boxplot)",
       x = "Variables",
       y = "Valeurs") +
  theme_minimal() +  # Thème épuré
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotation des étiquettes

```



::: success-header
::: success-icon
::: 
Résultats
:::

::: success
Comme on pouvait s'y attendre, on retrouve des distributions assez variées selon les différentes statistques des joueurs.

On peut tout de même remarquer que nos variables ont en général peu de valeurs outliers.
:::

## Correlation panel

On regarde ici la corrélation calculée entre chacune de nos variables.

```{r, fig.height=22, fig.width=28}
pairs.panels(
  Hitters_Without_NA_quant,
  method = "pearson",      # Méthode de corrélation 
  hist.col = brewer.pal(9, "Set3"), # Couleurs des histogrammes
  density = TRUE,          # Ajout des courbes de densité
  ellipses = TRUE,         # Ajout d'ellipses 
  smooth = TRUE,           # Ajout de régressions lissées
  lm = TRUE,               # Ajout des droites de régression
  col = "#69b3a2",         # Couleur des points
  alpha = 0.5              # Transparence 
)
```


::: success-header
::: success-icon
::: 
Résultats
:::

::: success
On voit la présence de plusieurs fortes corrélations qui peut déjà nous alerter si l'on veut faire des modèles de regressions linéaires car on risque d'avoir un problème de colinéarité entre les varibales explicatives.

Par contre, il n'y a aucune forte corrélation entre la variable *Salary* et les autres variables du jeu de données. Ce qui peut nous indiquer qu'il n'y aura pas une variable avec très forte influence sur *Salary*.
:::


## PCA

Avec une Analyse en Composantes Principales (PCA) on peut regarder un peu le comportement de nos données.

En effet, Cette méthode respose sur la transformation des variables d'origine en nouvelles variables non corrélées, appelées composantes principales, qui capturent successivement la plus grande variance possible des données.

```{r}
res_pca <- PCA(Hitters_Without_NA, 
               quali.sup = c(which(colnames(Hitters_Without_NA) %in% c("League", "Division", "NewLeague"))),
               quanti.sup = which(colnames(Hitters_Without_NA) == "Salary"),
               graph = FALSE)

```

Ici, on spécifi nos varibales qualitatives et on décide de mettre la variable *Salary* en variable supplémentaire, ce qui veut d'ire qu'elle ne sera pas considéré pour la formation de nos composantes principales (variable que l'on cherchera à estimer plus tard).

::: panel-tabset
#### Barplot des variances

Tout d'abord, on peut commencer par regarder le pourcentage de variance expliqué par nos différentes composantes principales.

```{r}
fviz_eig(res_pca, 
         ncp = 10,
         addlabels = TRUE, 
         barfill = "coral",
         barcolor = "coral",
         ylim = c(0, 50),
         main = "Percentage of variance of the 10 first components")
```

::: success-header
::: success-icon
::: 
Résultats
:::

::: success
On voit ainsi que la majorité de la variance est expliquée par nos deux premières composantes principales avec la présence d'un fort effet de coude après celle-ci.
:::

#### Individus

Le plan des individus est une projection des observations (dans notre cas, les joueurs de baseball) sur les axes principaux de la PCA. Cette visualisation permet d’identifier des regroupements, tendances et anomalies au sein des données.

Ainsi, des individus proches sur le graphique ont des caractéristiques similaires par rapport aux variables utilisées.

Puis, le placement d'un individu en fonction des axes peut permettre de savoir comment le jouer se caractérise par rapport aux variables qui contribuent le plus à ces axes.

```{r, fig.height=6, fig.width=8}
fviz_pca_ind(res_pca, 
             label = "none",  # Supprime les noms des individus
             pointsize = 2,    # Taille des points
             col.ind = "cyan3")

```

::: success-header
::: success-icon
::: 
Résultats
:::

::: success
Ici, on voit que les joueurs se répartissent bien sur le plan ce qui témoignent de la présence d'une grande variété de type de joueurs.
:::

#### Variables

Le cercle des variables est une représentation graphique qui permet d’analyser les relations entre les variables initiales et les composantes principales qui forment nos axes. Il est basé sur les corrélations entre les variables et les axes principaux.

Ainsi, plus une variable est proche du bord du cercle, plus elle est bien représentée sur le plan factoriel et contribue fortement à la formation des axes. Ici, on utilise le cos2 pour le gradient de couleur qui va aider à l'indentifictation de ces différentes qualitées de représentation.

De plus, selon l'angle entre deux varibles, on peut faire des suppositions sur leur corrélation :

-   Si deux variables ont des vecteurs proches (petit angle), elles sont fortement corrélées positivement

-   Si deux variables ont des vecteurs opposés (angle proche de 180°), elles sont corrélées négativement

-   Si l’angle est proche de 90°, alors les variables ne sont pas corrélées

```{r, fig.height=6, fig.width=8}
fviz_pca_var(res_pca, 
             col.var = "cos2",
             gradient.cols = rainbow(n = 8, start = .6, end = .9),
             repel = TRUE)

```



::: success-header
::: success-icon
::: 
Résultats
:::

::: success
Dans notre cas, ce que l'on peut voir c'est que la majorité de nos variables sont bien représentées par nos deux axes (cumulant plus de 70% d'explication). Mais beaucoup semblent aussi fortement corrélées avecla formation de deux groupes et la variable *Salary* se trouvant au milieu. Cette corrélation ayant déjà pu être observé précédemment.
:::

:::
::::

# Analyse inférentielle

## Modèle brut

On désire modéliser le salaire *Salary* en fonction des variables disponibles.

On va donc ajuster un modèle de régression linéaire en utilisant toutes les variables à disposition et analyser la qualité de cet ajustement.

```{r}
mod1 <- lm(formula = Salary ~ .,
           Hitters_Without_NA) 
mod1 %>% summary()

```

::: callout-note
Nous sommes sur un modèle comprenant des variables quantitatives et qualitative ce qui le rapproche d'une modélisation ANOVA.
:::

::: success-header
::: success-icon
::: 
Résultats
:::

::: success
Quelques conclusions sur le modèle :

-   beaucoup de variables ont un effet non significatif

-   le $R^2$ et le $R^2_{adjusted}$ sont autour de 0.5 ce qui témoigne d'une mauvaise qualité d'ajustament du modèle

-   l'écart type résiduel est de 315.6 ce qui est assez important et témoigne d'un modèle peu précis
:::

Pour tenter de trouver un meilleur ajustment, il est important d'analyser d'avantage le lien entre toutes les variables explicatives. On utilise alors comunément le VIF (*variance inflation factor*). 

On obtient alors pour chacune de nos variable une valeur qui, plus elle est élevé, témoigne de la multicolinéarité entre nos variables explicatives.

```{r}
vif(mod1) 
```

On remarque ainsi que beaucoup de valeurs sont supérieur à 10 ce qui s'interprète communément comme la précence d'une forte colinéarité sur nos variables explicatives.

::: callout-note
Cette colinéarité se constatait déjà durant les analyses descriptive via les graphes de corrélations (d'où l'importance de ne pas se lancer trop rapidement dans les analyses inférentielles).
::: 

## Modèles parcimonieux

Maintenant, on va donc tenter de trouver le meilleur sous-modèle possible. Pour cela on va suivre la procédure suivante :

-   mettre en oeuvre une méthode de sélection automatique exhaustive et observer l’évolution des SCR (Sommes de Carrés Résiduels) pour les modèles retenus en fonction de leur taille.

-   déduire de ces SCR le $R^2$, $R^2_{adjusted}$, AIC, BIC et $C_p$ correspondants. Les comparer avec les valeurs fournies dans le summary de regsubsets et tracer leur évolution en fonction de la taille du modèle.

Puis reproduire la même procédure avec des séléctions *backward*, *forward* et *stepwise*

::: callout-note
Un rappel sur nos critère se trouve dans la partie *Setup*, onglet fonction, de ce document avec la création de fonction pour les calculer.
:::

::::::::::: panel-tabset
### Exhaustive

:::: panel-tabset
#### Modèle

```{r}
selec_auto <- regsubsets(Salary~.,
                         Hitters_Without_NA,
                         method = "exhaustive",
                         nvmax = 19 # maximum size of subsets to examine
                         )
# selec_auto %>% summary()
```

On va déjà commencer par regarder la valeur du critère en fonction des variables des différents modèles testés.

```{r, fig.height=10, fig.width=12}
par(mfrow=c(2,2))
plot(selec_auto, scale = 'bic') 
plot(selec_auto, scale = 'Cp') 
plot(selec_auto, scale = 'r2') 
plot(selec_auto, scale = 'adjr2') 

```

::: success-header
::: success-icon
::: 
Résultats
:::

::: success
Ici on remarque clairement que toutes nos variables ne sont pas gardés lorsque l'on cherche à optimiser nos critères.

Aussi, on peut voir encore de faibles valeurs pour les $R^2$ et $R^2_{adjusted}$ pouvant témoignés d'un mauvais ajustement de modèle.
:::


::: callout-note
plot.regsubsets() de leaps ne prend pas directement "aic" comme option de scale. Pour une sélection basée sur AIC, une approche alternative consiste à utiliser la fonction stepAIC() du package MASS, qui permet une sélection pas à pas basée sur AIC.
:::

#### Evolution des critères

Regardons un peut l'évolution de la Somme des Carrés Résiduels (SCR).

```{r, fig.height=12, fig.width=16}
SCR <- summary(selec_auto)$rss
Criteria_plot(SCR, crit_name = "Somme des Carrés Résiduels")
```

Maintenant regardons les autres critères mentionné précédemment

```{r, fig.height=18, fig.width=30}
r2 <- r2_fun(Hitters_Without_NA$Salary, SCR)
r2a <- r2a_fun(Hitters_Without_NA$Salary, SCR)
cp <- cp_fun(mod1, SCR)
aic <- aic_fun(SCR)
bic <- bic_fun(SCR)

grid.arrange(Criteria_plot(r2, crit_name = "R2"),
             Criteria_plot(r2a, crit_name = "R2 ajusté"),
             Criteria_plot(cp, crit_name = "Cp"),
             Criteria_plot(aic, crit_name = "AIC"),
             Criteria_plot(bic, crit_name = "BIC"),
             ncol = 3)
```

On peut ainsi voir que ce sont plutot des modèles entre 5 et 10 variables qui optimisent nos critères (donc pas un modèle avec toutes nos variables).

#### Meilleur modèle

Regardons donc pour chaque critère quel est le modèle qui resort comme le meilleur

```{r}
criteria_df <- data.frame(r2, r2a, cp, aic, bic)
Best_model(selec_auto, criteria_df)
```
::::

### Backward

Cette fois ci on va regarder en sélection backward. D'abord, on fait à nouveau avec la fonction regsubset.

::: panel-tabset
#### Modèle

```{r}
selec_back <- regsubsets(Salary~.,
                         Hitters_Without_NA,
                         method = "backward",
                         nvmax = 19)
```

```{r, fig.height=10, fig.width=12}
par(mfrow=c(2,2))
plot(selec_back, scale = 'bic') 
plot(selec_back, scale = 'Cp') 
plot(selec_back, scale = 'r2') 
plot(selec_back, scale = 'adjr2') 

```


::: success-header
::: success-icon
::: 
Résultats
:::

::: success
On remarque à nouveau une importante sélection de variables.

Mais ici aussi on a encore de faibles valeurs pour les $R^2$ et $R^2_{adjusted}$ pouvant témoignés d'un mauvais ajustement de modèle.
:::


#### Evolution des critères

```{r, fig.height=18, fig.width=30}
SCR <- summary(selec_back)$rss
r2 <- r2_fun(Hitters_Without_NA$Salary, SCR)
r2a <- r2a_fun(Hitters_Without_NA$Salary, SCR)
cp <- cp_fun(mod1, SCR)
aic <- aic_fun(SCR)
bic <- bic_fun(SCR)

grid.arrange(Criteria_plot(r2, crit_name = "R2"),
             Criteria_plot(r2a, crit_name = "R2 ajusté"),
             Criteria_plot(cp, crit_name = "Cp"),
             Criteria_plot(SCR, crit_name = "Somme des Carrés Résiduels"),
             Criteria_plot(aic, crit_name = "AIC"),
             Criteria_plot(bic, crit_name = "BIC"),
             ncol = 3)
```

#### Meilleur modèle

Regardons donc pour chaque critère quel est le modèle qui resort comme le meilleur

```{r}
criteria_df <- data.frame(r2, r2a, cp, aic, bic)
Best_model(selec_back, criteria_df)
```
:::

#### **Utilisation de la fonction step**

---

On peut également utiliser la fonction *step* de la library { *stats* }. Pour cela, on part du plus gros modèle défini précédemment par *mod1.*

La fonction *step* nous propose quel critère nous voulons utiliser pour la sélection entre le BIC, AIC et $C_p$.

::: panel-tabset
#### BIC

```{r}
n <- nrow(Hitters_Without_NA)
modselect_back_bic <- step(mod1,
                       scope = formula(mod1),
                       trace = FALSE, # trace = TRUE permet de voir le détail des étapes
                       direction = c("backward"),
                       k = log(n) # BIC selection
                       )
```

Puis on peut regarder le modèle qui optimise le critère utilisé pour la selection.

```{r}
modselect_back_bic %>% summary()
```

La fonction step propose aussi une selection avec AIC et Cp.

#### AIC

```{r}
modselect_back_aic <- step(mod1,
                       scope = formula(mod1),
                       trace = FALSE, 
                       direction = c("backward"),
                       k = 2 # AIC selection
                       )

modselect_back_aic %>% summary()
```

#### $C_p$

```{r}
modselect_back_cp <- step(mod1,
                       scope = formula(mod1),
                       trace = FALSE, 
                       direction = c("backward"),
                       k = 1 # Cp selection
                       )

modselect_back_cp %>% summary()
```

On voit que parmi nos modèles, le BIC semble le plus parcimonieux mais de manière général on constate encore des valeurs de $R^2$ et $R^2_{adjusted}$ assez faibles.
:::

### Forward

Cette fois ci on va regarder en sélection *forward*. D'abord, on fait à nouveau avec la fonction regsubset.

::: panel-tabset
#### Modèle

```{r}
selec_forw <- regsubsets(Salary~.,
                         Hitters_Without_NA,
                         method = "forward",
                         nvmax = 19)
```

```{r, fig.height=10, fig.width=12}
par(mfrow=c(2,2))
plot(selec_forw, scale = 'bic') 
plot(selec_forw, scale = 'Cp') 
plot(selec_forw, scale = 'r2') 
plot(selec_forw, scale = 'adjr2') 

```


::: success-header
::: success-icon
::: 
Résultats
:::

::: success
On remarque à nouveau une importante sélection de variables.

Mais ici aussi on a encore de faibles valeurs pour les $R^2$ et $R^2_{adjusted}$ pouvant témoignés d'un mauvais ajustement de modèle.
:::


#### Evolution des critères

```{r, fig.height=18, fig.width=30}
SCR <- summary(selec_forw)$rss
r2 <- r2_fun(Hitters_Without_NA$Salary, SCR)
r2a <- r2a_fun(Hitters_Without_NA$Salary, SCR)
cp <- cp_fun(mod1, SCR)
aic <- aic_fun(SCR)
bic <- bic_fun(SCR)

grid.arrange(Criteria_plot(r2, crit_name = "R2"),
             Criteria_plot(r2a, crit_name = "R2 ajusté"),
             Criteria_plot(cp, crit_name = "Cp"),
             Criteria_plot(SCR, crit_name = "Somme des Carrés Résiduels"),
             Criteria_plot(aic, crit_name = "AIC"),
             Criteria_plot(bic, crit_name = "BIC"),
             ncol = 3)
```

#### Meilleur modèle

Regardons donc pour chaque critère quel est le modèle qui resort comme le meilleur

```{r}
criteria_df <- data.frame(r2, r2a, cp, aic, bic)
Best_model(selec_forw, criteria_df)
```
:::

#### **Utilisation de la fonction step**

---

On peut également utiliser la fonction *step* de la library { *stats* }. Cette fois ci il faut définir en modèle de départ le plus petit modèle (celui composé seulement de l'intercept).

La fonction *step* nous propose quel critère nous voulons utiliser pour la sélection entre le BIC, AIC et $C_p$.

::: panel-tabset
#### BIC

```{r}
mod0 <- lm(Salary~1,
           Hitters_Without_NA)

modselect_forw_bic <- step(mod0,
                       scope = formula(mod1),
                       trace = FALSE, # trace = TRUE permet de voir le détail des étapes
                       direction = c("forward"),
                       k = log(n) # BIC selection
                       )
```

Puis on peut regarder le modèle qui optimise le critère utilisé pour la selection.

```{r}
modselect_forw_bic %>% summary()
```

La fonction step propose aussi une selection avec AIC et Cp.

#### AIC

```{r}
modselect_forw_aic <- step(mod0,
                       scope = formula(mod1),
                       trace = FALSE, 
                       direction = c("forward"),
                       k = 2 # AIC selection
                       )

modselect_forw_aic %>% summary()
```

#### $C_p$

```{r}
modselect_forw_cp <- step(mod0,
                       scope = formula(mod1),
                       trace = FALSE, 
                       direction = c("forward"),
                       k = 1 # Cp selection
                       )

modselect_forw_cp %>% summary()
```

On voit que parmi nos modèles, le BIC semble le plus parcimonieux mais de manière général on constate encore des valeurs de $R^2$ et $R^2_{adjusted}$ assez faibles.
:::

### Stepwise

Maintenant on va regarder en sélection *stepwise*. D'abord, on fait à nouveau avec la fonction regsubset.

::: panel-tabset
#### Modèle

```{r}
selec_seq <- regsubsets(Salary~.,
                         Hitters_Without_NA,
                         method = "seqrep",
                         nvmax = 19)
```

```{r, fig.height=10, fig.width=12}
par(mfrow=c(2,2))
plot(selec_seq, scale = 'bic') 
plot(selec_seq, scale = 'Cp') 
plot(selec_seq, scale = 'r2') 
plot(selec_seq, scale = 'adjr2') 

```

::: success-header
::: success-icon
::: 
Résultats
:::

::: success
On remarque à nouveau une importante sélection de variables.

Mais ici aussi on a encore de faibles valeurs pour les $R^2$ et $R^2_{adjusted}$ pouvant témoignés d'un mauvais ajustement de modèle.
:::

#### Evolution des critères

```{r, fig.height=18, fig.width=30}
SCR <- summary(selec_seq)$rss
r2 <- r2_fun(Hitters_Without_NA$Salary, SCR)
r2a <- r2a_fun(Hitters_Without_NA$Salary, SCR)
cp <- cp_fun(mod1, SCR)
aic <- aic_fun(SCR)
bic <- bic_fun(SCR)

grid.arrange(Criteria_plot(r2, crit_name = "R2"),
             Criteria_plot(r2a, crit_name = "R2 ajusté"),
             Criteria_plot(cp, crit_name = "Cp"),
             Criteria_plot(SCR, crit_name = "Somme des Carrés Résiduels"),
             Criteria_plot(aic, crit_name = "AIC"),
             Criteria_plot(bic, crit_name = "BIC"),
             ncol = 3)
```

#### Meilleur modèle

Regardons donc pour chaque critère quel est le modèle qui resort comme le meilleur

```{r}
criteria_df <- data.frame(r2, r2a, cp, aic, bic)
Best_model(selec_seq, criteria_df)
```
:::

#### **Utilisation de la fonction step**

---

On peut également utiliser la fonction *step* de la library { *stats* }.

La fonction *step* nous propose quel critère nous voulons utiliser pour la sélection entre le BIC, AIC et $C_p$.

::: panel-tabset
#### BIC

```{r}
modselect_bic <- step(mod0,
                  scope = formula(mod1),
                  trace = FALSE,
                  direction = c("both"),
                  k = log(n))
modselect_bic %>% summary()
```

#### AIC

```{r}
modselect_aic <- step(mod0,
                  scope = formula(mod1),
                  trace = FALSE,
                  direction = c("both"),
                  k = 2)
modselect_aic %>% summary()
```

#### $C_p$

```{r}
modselect_cp <- step(mod0,
                  scope = formula(mod1),
                  trace = FALSE,
                  direction = c("both"),
                  k = 1)
modselect_cp %>% summary()
```

Malheuresement, même en sélection *both* nous avons encore des $R^2$ et $R^2_{adjusted}$ faibles.
:::

::: callout-note
Aussi, si on veut comparer le modèle initial et le modèle final, on peut utiliser la fonction *ANOVA*. Cela permet de voir si la sélection de variables a significativement amélioré l'ajustement.

```{r}
anova(mod0, modselect_bic, test = "Chisq")
```

De manière logique on voit donc tout de même que le modèle avec nos variable explicatives sélectionnées (ici celui avec selection via le critère BIC) propose un meilleur ajustement que celui sans variable.
::: 

:::::::::::

# Comparaison des critères

Avant de finir, comparons un peut les critères que nous avons calculés avec ceux que l'on peut récupérer via le summary de regsubset (pour tous sauf l'AIC qui n'est pas présent). On se contentera de faire se comparatif seulement pour le modèle *stepwise*.

Pour cela regardons si nous avons régulièrement la valeur 0 (ou valeur proche) lorsque l'on fait la soustraction du critère calculé et du critère donné par regsubset :

```{r}
cat(round(r2-summary(selec_seq)$rsq) %>% mean(), 
    round(r2a-summary(selec_seq)$adjr2) %>% mean(), 
    round(cp-summary(selec_seq)$cp) %>% mean(), 
    round(bic-summary(selec_seq)$bic) %>% mean())
```

on voit une grosse différence seulement pour le BIC donc regardons plus en détail via les représentations visuelles de l'évolution du critère.

```{r, fig.height=14, fig.width=26}
grid.arrange(Criteria_plot(bic, crit_name = "BIC"),
             Criteria_plot(summary(selec_seq)$bic, crit_name = "BIC regsubstet ajusté"),
             ncol = 2)
```

On voit que les valeurs sont différentes mais en fait le comportement est identique. Ce qui veut dire que la différence est seulement due à une constant multiplicative près.

# Conclusion

À la lumière des résultats de notre analyse, on peut envisager le modèle *both* car bien qu'il n'ait pas montré de grandes améliorations en termes de $R^2$ et $R^2_{adjusted}$, il permet de réduire le nombre de variables tout en maintenant celles qui sont significatives. Ce modèle est donc plus parcimonieux tout en conservant des variables importantes. Cependant, une réflexion supplémentaire pourrait être menée sur l'éventuelle suppression de l'*intercept*, ce qui nécessiterait une validation supplémentaire.

En ce qui concerne le choix final du modèle, on peut opté pour celui qui maximise le critère BIC, ce qui nous mène à un modèle avec 6 variables. Le BIC est particulièrement utile pour privilégier un modèle plus simple et plus parcimonieux, ce qui est un atout lorsqu'on cherche à éviter un surajustement. Toutefois, il est important de noter que la qualité de l'ajustement n'est pas optimale, ce qui suggère qu'il pourrait manquer certaines informations pour expliquer pleinement la variable cible (le salaire).

Enfin, la validité interne est un aspect crucial qui n'a pas été suffisamment exploré dans cette analyse. Il aurait été pertinent de vérifier que toutes les hypothèses sous-jacentes des modèles étaient satisfaites. Cela aurait permis de renforcer la robustesse de nos résultats et de garantir que les conclusions qu'on sont fiables.

Donc, il serait pertinent d'examiner plus en profondeur la validité interne, notamment en testant les hypothèses de normalité, d'homoscédasticité, et d'indépendance des résidus.

# Session info

```{r}
sessioninfo::session_info(pkgs = "attached")
```
